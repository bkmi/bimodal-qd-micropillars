function funcs = init_funcs( param )
%Create rotational functionality for DDEBIF
A_rot=...
    [0,-1,0,0,0,0;...
    1,0,0,0,0,0;...
    0,0,0,0,0,0;...
    0,0,0,0,0,0;...
    0,0,0,0,0,0;...
    0,0,0,0,0,0];
B_rot=...
    [0,0,0,0,0,0;...
    0,0,0,0,0,0;...
    0,0,0,-1,0,0;...
    0,0,1,0,0,0;...
    0,0,0,0,0,0;...
    0,0,0,0,0,0];
expMAT_rot=@(phi,theta)...
    [cos(phi),-sin(phi),0,0,0,0; ...
    sin(phi),cos(phi),0,0,0,0; ...
    0,0,cos(theta),-sin(theta),0,0; ...
    0,0,sin(theta),cos(theta),0,0; ...
    0,0,0,0,1,0;...
    0,0,0,0,0,1];

rhs = @(x,p)nonDim_bimodalSystem_CnstCplRatio( ...
    x(1,1,:)+1i*x(2,1,:), x(1,2,:)+1i*x(2,2,:),... %EF1
    x(3,1,:)+1i*x(4,1,:), x(3,2,:)+1i*x(4,2,:),... %EF2
    x(5,1,:),x(6,1,:),...
    param.cplPar.feed_phaseMatrix, param.cplPar.feed_ampliMatrix, ...
    p(1),p(2),p(3),p(4),p(5),p(6),p(7),p(8),p(9),p(10),p(11),...
    p(12),p(13),p(14),p(15),p(16),p(17),p(18),p(19),p(20),p(21),...
    p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29)); % Leave out omega

% Prepare 'funcs' for DDEBIF
funcs = m_set_rotfuncs( ...
    'sys_rhs', rhs, ... 
    'rotation', {A_rot, B_rot}, ...
    'exp_rotation', expMAT_rot, ... 
    'sys_tau', @()bimodal_sys_tau, ...
    'x_vectorized', true);

end


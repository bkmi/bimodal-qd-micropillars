%% Hopf continuations from amplitude and phase continuations
% Data from 'phase_continuations.mat'

clear;
load(strcat(specific_bif_data_dir(), ...
    'hopfcont.mat'))

%% create the 'high hopfs' and plot with folds
phase_wHopf = rephases{9};

dest = destabilize_finder(phase_wHopf.nunst);
highX = phase_wHopf.point(phase_wHopf.indHopf(1)).x(1);
lowX = phase_wHopf.point(phase_wHopf.indHopf(5)).x(1);

highX_inds = [];
lowX_inds = [];
for i = 1:numel(dest)
    if ismember(dest(i),  phase_wHopf.indHopf)
        if abs(phase_wHopf.point(dest(i)).x(1) - highX) < 0.01
            highX_inds(end+1) = dest(i);
        end
        
        if abs(phase_wHopf.point(dest(i)).x(1) - lowX) < 0.01
            lowX_inds(end+1) = dest(i);
        end
    end
end
% find all of the starting points and see if you can get a followable hline


% rephases{9}.point(rephases{9}.indHopf(1)).parameter(param.feed_phase.index)
% destabilize_finder(rephases{9}.nunst)

% We want indHopf 1 & 5
hopf_branches = cell(2,1);
inds_hopf = [highX_inds(1), highX_inds(2), lowX_inds(1:2)]; 
for i = 1:2 % numel(inds_hopf)
    [hopf_branches{i}, ~]=SetupHopf( ...
        funcs, ...
        phase_wHopf, ...
        inds_hopf(i), ... % phase_wHopf.indHopf(inds_hopf(i)),...
        'contpar', ...
        [param.feed_phase.index, param.feed_ampli.index, param.omega1.index], ...
        'dir', param.feed_ampli.index, ...
        opt_inputs{:},...
        st_bif{:}); 
    
    hopf_branches{i} = bcont(funcs, hopf_branches{i}, 250, 250);
end


figure;
for i = 1:numel(hopf_branches)
    plot_branch3( hopf_branches{i}, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'color', 'c', ...
    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }, ...
    'add_2_gcf', 1)
end


plot_branch3( phase_wHopf, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'nunst_color', phase_wHopf.nunst, ...
    'add_2_gcf', 1)


%% try to follow a RPO at slightly higher feedback amplitude
[amp,~] = SetupStst( ...
    funcs, ...
    'contpar',[param.feed_ampli.index, param.omega1.index], ...
    'corpar',[param.omega1.index],...
    'x', rephases{9}.point(inds_hopf(2)).x, ...
    'parameter', rephases{9}.point(inds_hopf(2)).parameter,...
    opt_inputs{:},...
    st_amp{:});

amp = bcont( funcs, amp, 50, 0 );
amp = branch_stability(funcs, amp);

ind_of_interest = 15;

[phase,~] = SetupStst( ...
    funcs, ...
    'contpar',[param.feed_phase.index, param.omega1.index], ...
    'corpar',[param.omega1.index],...
    'x', amp.point(ind_of_interest).x, ...
    'parameter', amp.point(ind_of_interest).parameter,...
    opt_inputs{:},...
    st_phase{:});
phase = bcont( funcs, phase, 50, 50 );
phase = branch_stability(funcs, phase);


[rw_branch,suc] = SetupPsol( ...
    funcs, ...
    phase, ...
    phase.indHopf(end), ...
    'contpar', ...
    [param.feed_ampli.index, param.omega1.index], ...
    'dir', param.feed_ampli.index, ...
    opt_inputs{:},...
    st_amp{:});
rw_branch = bcont(funcs, rw_branch, 300, 300);
[rw_branch_nunst, dom_per, defect, rw_branch.point] = GetStability( ... 
    rw_branch,...
    'exclude_trivial', true, ...
    'locate_trivial', @(p)[1,1], ...
    'funcs', funcs);
plot_RPO3( rw_branch, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'color', 'r', ...
    'add_2_gcf', 1)

[hopf1, ~]=SetupHopf( ...
    funcs, ...
    phase, ...
    phase.indHopf(end), ... % phase_wHopf.indHopf(inds_hopf(i)),...
    'contpar', ...
    [param.feed_phase.index, param.feed_ampli.index, param.omega1.index], ...
    'dir', param.feed_ampli.index, ...
    opt_inputs{:},...
    st_bif{:}); 
    
hopf1 = bcont(funcs, hopf1, 250, 250);

plot_branch3( hopf1, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'color', 'c', ...
    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }, ...
    'add_2_gcf', 1)

% take away from this section: hopf continues past fold. RPO is unstable


%% add folds
clear;
load(strcat(specific_bif_data_dir(), ...
    'folds_main.mat'))

key = {'m', 'y', 'r', 'g', 'b', 'k'};
h = zeros(numel(folds), 1);

for i = 1:numel(folds)
    plot_branch3( folds{i}, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'color', key{i}, ...
    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' }, ...
    'add_2_gcf', 1)
end

%% Numerical tests below
%%
p = struct;
p.cplPar = param.cplPar;
p.tau_fb.value = param.tau_fb.value;
p.values = phase_wHopf.point(highX_inds(1)).parameter;
turn_on(p, phase_wHopf.point(highX_inds(1)).x)


%% low RPO
[rw_branch,~] = SetupPsol( ...
    funcs, ...
    phase_wHopf, ...
    inds_hopf(3), ...
    'contpar', ...
    [param.feed_ampli.index, param.omega1.index], ...
    'dir', param.feed_ampli.index, ...
    opt_inputs{:},...
    st_amp{:});
rw_branch = bcont(funcs, rw_branch, 300, 300);
[rw_branch_nunst, dom_per, defect, rw_branch.point] = GetStability( ... 
    rw_branch,...
    'exclude_trivial', true, ...
    'locate_trivial', @(p)[1,1], ...
    'funcs', funcs);
%%
plot_RPO3( rw_branch, ...
    param, ...
    'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
    'color', 'r', ...
    'add_2_gcf', 1)
%%

p = struct;
p.cplPar = param.cplPar;
p.tau_fb.value = param.tau_fb.value;
p.values = rw_branch.point(highX_inds(1)).parameter;
turn_on(p, rw_branch.point(highX_inds(1)).x)
%% load strongDom, tau = 0.83
treeLoader('datadir_specific', ...
    '/home/bkmiller/qd-micropillar-laser-project/data_bimodal-qd-micropillars/zeroPhaseOffsetJ=560uA/strongDomAlpha=0/tau_fb=0.83ns/');


%% more stst sweeps
stdyBrnchFB_regSpace = steadyBranchMultiCreator( ...
    funcs,  ...
    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], ...
    param.feed_phase.index, ...
    275, ...
    param, ...
    'sweep',1);

foldBranches = struct(...
    'method',struct, ...
    'parameter',struct, ...
    'point',struct, ...
    'newFuncs',@()'undefined',...
    'error', 0, ...
    'indError', NaN);
hopfBranches = struct(...
    'method',struct, ...
    'parameter',struct, ...
    'point',struct, ...
    'newFuncs',@()'undefined',...
    'error', 0, ...
    'indError', NaN);


%% 'interesting fb' - small and near fold intersections.

stdyBrnchFB_interesting = steadyBranchMultiCreator( ...
    funcs,  ...
    [0.025, 0.1330, 0.25, 0.3111, 0.3889], ...
    param.feed_phase.index, ...
    225, ...
    param, ...
    'sweep',1);

%% Probe fold

foldNear0133 = bifurFoldHopfMultiCreator( ...
    funcs, stdyBrnchFB_interesting(2), param, stdyBrnchFB_interesting(2).indFold, 100);

% foldTest(1) = br_contn(foldTest(1).newFuncs, foldTest(1), 50);
% foldTest(1) = br_rvers(foldTest(1));
% foldTest(1) = br_contn(foldTest(1).newFuncs, foldTest(1), 50);
% 
% foldTest(2) = br_contn(foldTest(2).newFuncs, foldTest(2), 50);
% foldTest(2) = br_rvers(foldTest(2));
% foldTest(2) = br_contn(foldTest(2).newFuncs, foldTest(2), 50);

%% Probe hopf

% % short
% hopfTest = bifurFoldHopfMultiCreator( ...
%      funcs, stdyBrnchFB_regSpace(2), param, stdyBrnchFB_regSpace(2).indHopf, 35);
% 
% % short
% hopfTest2 = bifurFoldHopfMultiCreator( ...
%     funcs, stdyBrnchFB_regSpace(3), param, stdyBrnchFB_regSpace(3).indHopf, 25);

hopfTestNear025 = bifurFoldHopfMultiCreator( ...
    funcs, stdyBrnchFB_interesting(3), param, stdyBrnchFB_interesting(3).indHopf, 60);

hopfTestNear0311 = bifurFoldHopfMultiCreator( ...
    funcs, stdyBrnchFB_interesting(4), param, stdyBrnchFB_interesting(4).indHopf, 20);

hopfTestNear0389 = bifurFoldHopfMultiCreator( ...
    funcs, stdyBrnchFB_interesting(5), param, stdyBrnchFB_interesting(5).indHopf, 20);


% save([master_options.datadir_specific,'stdyBrnchFB_regSpace.mat'],'stdyBrnchFB_regSpace')
% save([master_options.datadir_specific,'stdyBrnchFB_interesting.mat'],'stdyBrnchFB_interesting')
% save([master_options.datadir_specific,'foldNear0133.mat'],'foldNear0133')
% save([master_options.datadir_specific,'hopfTestNear025.mat'],'hopfTestNear025')
% save([master_options.datadir_specific,'hopfTestNear0311.mat'],'hopfTestNear0311')
% save([master_options.datadir_specific,'hopfTestNear0389.mat'],'hopfTestNear0389')


%% Add the tested bifurcations to the total list

% foldBranches(1) = foldTest(1);
% foldBranches(2) = foldTest(2);
% 
% hopfBranches(1) = hopfTest(2);


%% feed amp dir

% stdyBranch_alongFB0_FA = pickAndSwitch(funcs, ...
%     stdyBrnchFB_regSpace(1), ...
%     param.feed_ampli.index, ...
%     250, ...
%     param, ...
%     'fig', branchplot, ...
%     'axes_indParam', [param.feed_phase.index, param.feed_ampli.index], ...
%     'reverse',1);

numVert = 15;

stdyBrnchFA_fromReg1 = struct( ...
    'method', struct, ...
    'parameter', struct, ...
    'point', struct, ...
    'nunst', 0, ...
    'indFold', 0106, ...
    'indHopf', 0, ...
    'timeDomain', struct);
stdyBrnchFA_fromReg1 = repmat(stdyBrnchFA_fromReg1, numVert);
pointsToContinueFrom = round(linspace(20,numel(stdyBrnchFB_regSpace(1).point)-20,15));

for i = 1:numel(pointsToContinueFrom)
    stdyBrnchFA_fromReg1(i) = pickAndSwitch(funcs, ...
        stdyBrnchFB_regSpace(1), ...
        param.feed_ampli.index, ...
        250, ...
        param, ...
        'reverse',1 , ...
        'point', pointsToContinueFrom(i));
end

% save([master_options.datadir_specific,'stdyBrnchFA_fromReg1.mat'],'stdyBrnchFA_fromReg1')
% longMid = stdyBrnchFA_fromReg1(8)
% longMid.parameter.min_bound = []
% longMid.parameter.max_bound = []
% longMid = br_contn(funcs, longMid, 125)
% longMid = br_rvers(longMid)
% longMid = br_contn(funcs, longMid, 125)
% longMid.nunst = GetRotStability(longMid, funcs, 2)
% save([master_options.datadir_specific,'longMid.mat'],'longMid')


%% find nunst 2 in fa

for i = 1:numel(stdyBrnchFA_fromReg1)
    if any(stdyBrnchFA_fromReg1(i).nunst == 2)
        plot_branch(stdyBrnchFA_fromReg1(i), param, ...
            'twoOmegaNunst', stdyBrnchFA_fromReg1(i).nunst)
    end
end

%% Curve fold on right side

curveFold = bifurFoldHopfMultiCreator( ...
    funcs, stdyBrnchFA_fromReg1(5), param, stdyBrnchFA_fromReg1(5).indFold(2), 40);
save([master_options.datadir_specific,'curveFold.mat'],'curveFold')

%% Let's go close to it in feed_phase

disp(stdyBrnchFA_fromReg1(5).indFold(2))
% higher pt is more stable. <=43 == 3 nunst, >=44 = 2 nunst 

phaseTest3nunst = pickAndSwitch(funcs, ...
    stdyBrnchFA_fromReg1(5), ...
    param.feed_phase.index, ...
    100, ...
    param, ...
    'reverse',1, ...
    'nunst_color',stdyBrnchFA_fromReg1(5).nunst , ...
    'point', 39); % finds some unstable hopf bifurcations, useless fold

% ALREADY HAVE THESE
% phaseTest2nunst = pickAndSwitch(funcs, ...
%     stdyBrnchFA_fromReg1(5), ...
%     param.feed_phase.index, ...
%     100, ...
%     param, ...
%     'reverse',1, ...
%     'nunst_color',stdyBrnchFA_fromReg1(5).nunst, ...
%     'point', 48);  % finds two fold bifurcations

%% SAVE

% % Sure you want to save and overwrite?
% saveSure = ...
%     input('\n\nAre you sure you want to save? \n0 = no \n1 = yes\n\n');
% % Force user to choose: OVERWRITE or not.
% while(1)
%     if saveSure == 1
%         saveit = 1; %Save and OVERWRITE
%         fprintf('Saving\n')
%         break
%     elseif saveSure == 0
%         saveit = 0; %Don't save and don't overwrite.
%         fprintf('Not saving\n')
%         break
%     end
% end
% 
% if saveSure == 1
%     disp('\nSaved\n')
%     save([master_options.datadir_specific,'stdyBrnchFB'],'stdyBrnchFB')
% 
%     save([master_options.datadir_specific,'foldBranches'],'foldBranches')
% 
%     save([master_options.datadir_specific,'hopfBranches'],'hopfBranches')
% end

%% For weakDom, tau = 0.83
% treeLoader('datadir_specific', ...
%     '/home/bkmiller/qd-micropillar-laser-project/data_bimodal-qd-micropillars/zeroPhaseOffsetJ=560uA/weakDomAlpha=0/tau_fb=0.83ns/');


%% Feedback amplitude, current amplitude

clear;

feedPhaseMat = [1, 1; 1, 1];
feedAmpMat = [1, 0; 0, 0];

% SetupParams
param = setup_params_nonDim_CnstCplRatio(...
    'save',0, ...
    'populate_wrkspc',0, ...
    'alpha_par',0, ...
    'feed_ampli', 0.15, ...
    'feed_ampliMatrix', feedAmpMat, ...
    'feed_phase',0, ...
    'feed_phaseMatrix', feedPhaseMat, ...
    'clear',0,...
    'J',560e-6,...
    'tau_fb', 0.8);

%% solver
sys_4solver = @(x)nonDim_bimodalINTENSITYSystem_CnstCplRatio(...
    x(1,1,:) + 1i*x(2,1,:), x(1,2,:) + 1i*x(2,2,:),... % Es, EsTau
    x(3,1,:), x(3,2,:),... % Iw, IwTau
    x(4,1,:), ... % rho
    x(5,1,:), ... % n
    param.cplPar.feed_phaseMatrix, param.cplPar.feed_ampliMatrix, ...
    param.values(1),param.values(2),param.values(3),param.values(4), ...
    param.values(5),param.values(6),param.values(7),param.values(8), ...
    param.values(9),param.values(10),param.values(11),param.values(12), ...
    param.values(13),param.values(14),param.values(15),param.values(16), ...
    param.values(17),param.values(18),param.values(19),param.values(20), ...
    param.values(21),param.values(22),param.values(23),param.values(24), ...
    param.values(25),param.values(26),param.values(27),param.values(28), ...
    param.values(29)); % Leave out omega

lags = param.values(param.tau_fb.index);
hist = [1e-9, 0, 1e-9, 0, 0];
timeSpan = [0, 15];

dde23_soln = dde23( ...
    @(t,y,z)sys_4solver([y,z]),...
    lags,hist,timeSpan,ddeset('RelTol',10^-8, 'OutputFcn', @odeplot));

%% branch
aRot=...
    [0,-1,0,0,0;...
    1,0,0,0,0;...
    0,0,0,0,0;...
    0,0,0,0,0;...
    0,0,0,0,0];
expRot = @(phi)[...
    cos(phi),-sin(phi),0,0,0; ...
    sin(phi),cos(phi),0,0,0; ...
    0,0,1,0,0; ...
    0,0,0,1,0; ...
    0,0,0,0,1];

rhs = @(x,p)nonDim_bimodalINTENSITYSystem_CnstCplRatio( ...
    x(1,1,:) + 1i*x(2,1,:), x(1,2,:) + 1i*x(2,2,:),... % Es, EsTau
    x(3,1,:), x(3,2,:),... % Iw, IwTau
    x(4,1,:), ... % rho
    x(5,1,:), ... % n
    param.cplPar.feed_phaseMatrix, param.cplPar.feed_ampliMatrix, ...
    p(1),p(2),p(3),p(4),p(5),p(6),p(7),p(8),p(9),p(10),p(11),...
    p(12),p(13),p(14),p(15),p(16),p(17),p(18),p(19),p(20),p(21),...
    p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29)); % Leave out omega

opt_inputs = {'extra_condition',1,'print_residual_info',0};

funcs = set_rotfuncs( ...
    'sys_rhs',rhs, ... 
    'rotation',aRot, ...
    'exp_rotation',expRot, ... 
    'sys_tau',@()bimodal_sys_tau, ...
    'x_vectorized',true);

stepBoundFBamp = {'step',0.003, ...
    'max_step',[param.feed_ampli.index,0.003], ...
    'newton_max_iterations',10, ...
    'max_bound',[param.feed_ampli.index,2], ...
    'min_bound', [param.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

[branchSTST,~]=SetupStst(funcs, ...
    'contpar',[param.feed_ampli.index, param.omega1.index], ...
    'corpar',[param.omega1.index],...
    'x', dde23_soln.y(:,end), ...
    'parameter',param.values(1:end-1),...
    opt_inputs{:},...
    stepBoundFBamp{:});

branch_length = 150;

[branchSTST,~,~,~] = br_contn(funcs,branchSTST,branch_length);
branchSTST = br_rvers(branchSTST);
[branchSTST,~,~,~] = br_contn(funcs,branchSTST,branch_length);

[branchSTST.nunst,~,~,branchSTST.point] = GetRotStability(branchSTST, ...
    funcs, 1);
branchSTST.indFold = find(abs(diff(branchSTST.nunst))==1);
branchSTST.indHopf = find(abs(diff(branchSTST.nunst))==2);

%% Follow FoldOne

stepBoundFold = { ...
    'step',0.003, ...
    'max_step',[param.feed_ampli.index,0.003], ...
    'newton_max_iterations',10, ...
    'max_bound',[param.feed_ampli.index,2], ...
    'min_bound', [param.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

[foldfuncs,foldOne,~]=m_SetupRWFold( ...
        funcs, ...
        branchSTST, ...
        branchSTST.indFold(1),...
        'contpar',[param.feed_ampli.index,param.J.index,param.omega1.index], ...
        'dir',param.feed_ampli.index, ...
        opt_inputs{:},...
        stepBoundFold{:}); 

foldBranchLength = 150;
    
foldOne = br_contn(foldfuncs,foldOne,foldBranchLength);
foldOne = br_rvers(foldOne);
foldOne = br_contn(foldfuncs,foldOne,foldBranchLength);

% %% Follow FoldTwo
% 
% stepBoundFold = { ...
%     'step',0.0003, ...
%     'max_step',[param.feed_ampli.index,0.003], ...
%     'newton_max_iterations',10, ...
%     'max_bound',[param.feed_ampli.index,2], ...
%     'min_bound', [param.feed_ampli.index,-2], ...
%     'halting_accuracy',1e-10, ...
%     'minimal_accuracy',1e-8};
% 
% [foldfuncs,foldTwo,~]=m_SetupRWFold( ...
%         funcs, ...
%         branchSTST, ...
%         branchSTST.indFold(2),...
%         'contpar',[param.feed_ampli.index,param.J.index,param.omega1.index], ...
%         'dir',param.feed_ampli.index, ...
%         opt_inputs{:},...
%         stepBoundFold{:}); 
% 
% foldBranchLength = 150;
%     
% foldTwo = br_contn(foldfuncs,foldTwo,foldBranchLength);
% foldTwo = br_rvers(foldTwo);
% foldTwo = br_contn(foldfuncs,foldTwo,foldBranchLength);

%% Follow HopfOne

stepBoundHopf = { ...
    'step',0.003, ...
    'max_step',[param.feed_ampli.index,0.003], ...
    'newton_max_iterations',10, ...
    'max_bound',[param.feed_ampli.index,2], ...
    'min_bound', [param.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};


[hopfOne,~]=SetupRWHopf( ...
    funcs, ...
    branchSTST, ...
    branchSTST.indHopf(1), ...
    'contpar',[param.feed_ampli.index,param.J.index,param.omega1.index], ...
    'dir',param.feed_ampli.index(1), ...
    opt_inputs{:},...
    stepBoundHopf{:});

hopfBranchLength = 150;

[hopfOne,~,~,~] = br_contn(funcs,hopfOne,hopfBranchLength);
hopfOne = br_rvers(hopfOne);
hopfOne = br_contn(funcs,hopfOne,3*hopfBranchLength);

% %% Follow HopfTwo
% 
% stepBoundHopf = { ...
%     'step',0.003, ...
%     'max_step',[param.feed_ampli.index,0.003], ...
%     'newton_max_iterations',10, ...
%     'max_bound',[param.feed_ampli.index,2], ...
%     'min_bound', [param.feed_ampli.index,-2], ...
%     'halting_accuracy',1e-10, ...
%     'minimal_accuracy',1e-8};
% 
% 
% [hopfTwo,~]=SetupRWHopf( ...
%     funcs, ...
%     branchSTST, ...
%     branchSTST.indHopf(2), ...
%     'contpar',[param.feed_ampli.index,param.J.index,param.omega1.index], ...
%     'dir',param.feed_ampli.index(1), ...
%     opt_inputs{:},...
%     stepBoundHopf{:});
% 
% hopfBranchLength = 150;
% 
% [hopfTwo,~,~,~] = br_contn(funcs,hopfTwo,hopfBranchLength);
% hopfTwo = br_rvers(hopfTwo);
% hopfTwo = br_contn(funcs,hopfTwo,hopfBranchLength);


%% PLOT

pruneFold = foldOne;
pruneFold.point(1:70) = [];
pruneFold.point(end-25:end) = [];

% plot settings
tdeco={'fontsize',30,'fontweight','bold'}; % 
ldeco={'fontsize',28}; % ,'fontweight','bold'
lgndFontSize = 24;

% colors
colorNum = 6;
greycol = brewermap(colorNum,'Greys');
orangecol = brewermap(colorNum,'Oranges');

% save location
datadir = '../data_bimodal-qd-micropillars/';



fig = figure('Color','White');

x = zeros(numel(pruneFold.point),1);
y = zeros(numel(pruneFold.point),1);

for i = 1:numel(pruneFold.point)
    x(i) = pruneFold.point(i).parameter(param.feed_ampli.index);
    y(i) = pruneFold.point(i).parameter(param.J.index);
end

% Scale
y = y * 1e6;

% for filling
xfill = [x', fliplr(x')];
yfill = [y', ones(1,numel(x)) * 1900];
ax = gca;
set(ax,'FontSize',lgndFontSize);

% plotting
hold on
ar2 = fill(xfill,yfill, 'blue','FaceAlpha',0.6); 
ar1 = area(ax, x,y,'FaceColor', 'k','FaceAlpha',0.5);
ln = plot(ax, x,y,'Color','k','LineWidth',3);

% limits
xlim([0,0.5]);
ylim([0,1400]);

grid on

lgnd = legend(ln, 'Saddle-node Bifurcation');
lgnd.FontSize = lgndFontSize;
lgnd.Location = 'SouthEast';

% title('Stability with Strong Mode Feedback',tdeco{:})
xlabel('Feedback Amplitude (no units)',ldeco{:})
ylabel('Current Amplitude (\muA)',ldeco{:})

% Add text
text(0.15,900,'Bistable Region','FontSize',lgndFontSize);
text(0.3,300,'Monostable Region', 'FontSize',lgndFontSize,'Color','w');


% Page settings
set(fig,'PaperType','a4')
set(fig,'PaperOrientation','landscape');
set(fig,'PaperUnits','normalized');
set(fig,'PaperPosition', [0 0 1 1]);

bifDiga = [datadir, 'bifDiag'];
% print(fig, ...
%     bifDiga, ...
%     '-dpdf')
print(fig, ...
    bifDiga, ...
    '-dpng')








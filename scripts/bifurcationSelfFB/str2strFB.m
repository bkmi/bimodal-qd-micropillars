%% Strong to strong feedback only in bimodal electric field.
% We investigate strong to strong feedback in the regime with weak
% dominating and strong dominating. 
%
% Weak dominating can be found with a turn-on time series given high enough
% current amplitude. Strong dominating can be found using a sweep up to the
% same current amplitude.
%% General settings

clear;

% save location
datadir = '/home/bkmiller/qd-micropillar-laser-project/data_bimodal-qd-micropillars/str2strFB/';
while isdir(datadir) == 0;
    mkdir(datadir);
end

% Laser/FB settings
current = 560e-6;
fbAmp = 0.2;
fbPhase = 0;
alpha_par = 0;
tau_fb_par = 0.8;

% feedback matrix settings
feedAmpMat = [1, 0; 0, 0];
feedPhaseMat = [1, 1; 1, 1];

% bifurcation setup
aRot=...
    [0,-1,0,0,0;...
    1,0,0,0,0;...
    0,0,0,0,0;...
    0,0,0,0,0;...
    0,0,0,0,0];
expRot = @(phi)[...
    cos(phi),-sin(phi),0,0,0; ...
    sin(phi),cos(phi),0,0,0; ...
    0,0,1,0,0; ...
    0,0,0,1,0; ...
    0,0,0,0,1];
rhs = @(x,p)nonDim_bimodalINTENSITYSystem_CnstCplRatio( ...
    x(1,1,:) + 1i*x(2,1,:), x(1,2,:) + 1i*x(2,2,:),... % Es, EsTau
    x(3,1,:), x(3,2,:),... % Iw, IwTau
    x(4,1,:), ... % rho
    x(5,1,:), ... % n
    feedPhaseMat, feedAmpMat, ...
    p(1),p(2),p(3),p(4),p(5),p(6),p(7),p(8),p(9),p(10),p(11),...
    p(12),p(13),p(14),p(15),p(16),p(17),p(18),p(19),p(20),p(21),...
    p(22),p(23),p(24),p(25),p(26),p(27),p(28),p(29)); % Leave out omega
opt_inputs = {'extra_condition',1,'print_residual_info',0};
funcs = set_rotfuncs( ...
    'sys_rhs',rhs, ... 
    'rotation',aRot, ...
    'exp_rotation',expRot, ... 
    'sys_tau',@()bimodal_sys_tau, ...
    'x_vectorized',true);

save([datadir, ...
    'generalSettings.mat'], ...
    'datadir', ...
    'current', 'fbAmp', 'fbPhase','alpha_par', 'tau_fb_par', ...
    'feedAmpMat', 'feedPhaseMat', ...
    'aRot', 'expRot', 'rhs', 'opt_inputs', 'funcs')

%% Weak dominating, Time Series
% Using turn on time series, we can find the stable case where the weak
% field dominates the output of the laser.

% parameter setup
paramWeakDom = setup_params_nonDim_CnstCplRatio(...
    'save',0, ...
    'J', current, ...
    'feed_ampli',fbAmp, ...
    'feed_ampliMatrix', feedAmpMat, ...
    'feed_phase',fbPhase, ...
    'feed_phaseMatrix', feedPhaseMat, ...
    'tau_fb', tau_fb_par, ...
    'alpha_par',alpha_par, ...
    'clear',0,...
    'populate_wrkspc', 0);

% Turn On solver
systemWeakDom = @(x)nonDim_bimodalINTENSITYSystem_CnstCplRatio(...
    x(1,1,:) + 1i*x(2,1,:), x(1,2,:) + 1i*x(2,2,:),... % Es, EsTau
    x(3,1,:), x(3,2,:),... % Iw, IwTau
    x(4,1,:), ... % rho
    x(5,1,:), ... % n
    paramWeakDom.cplPar.feed_phaseMatrix, ...
    paramWeakDom.cplPar.feed_ampliMatrix, ...
    paramWeakDom.values(1),paramWeakDom.values(2), ...
    paramWeakDom.values(3),paramWeakDom.values(4), ...
    paramWeakDom.values(5),paramWeakDom.values(6), ...
    paramWeakDom.values(7),paramWeakDom.values(8), ...
    paramWeakDom.values(9),paramWeakDom.values(10), ...
    paramWeakDom.values(11),paramWeakDom.values(12), ...
    paramWeakDom.values(13),paramWeakDom.values(14), ...
    paramWeakDom.values(15),paramWeakDom.values(16), ...
    paramWeakDom.values(17),paramWeakDom.values(18), ...
    paramWeakDom.values(19),paramWeakDom.values(20), ...
    paramWeakDom.values(21),paramWeakDom.values(22), ...
    paramWeakDom.values(23),paramWeakDom.values(24), ...
    paramWeakDom.values(25),paramWeakDom.values(26), ...
    paramWeakDom.values(27),paramWeakDom.values(28), ...
    paramWeakDom.values(29)); % Leave out omega

lags = paramWeakDom.values(paramWeakDom.tau_fb.index);
hist = [1e-9, 0, 1e-9, 0, 0];
timeSpan = [0, 15];

timeSeriesWeakDom = dde23( ...
    @(t,y,z)systemWeakDom([y,z]),...
    lags,hist,timeSpan,ddeset('RelTol',10^-8)); % , 'OutputFcn', @odeplot



%% Weak dominating, Bifurcation Amplitude
% Now we will use the time series from above to explore the bifurcations in
% the weak dominating case.


stepBoundWeakDom = { ...
    'step',0.003, ...
    'max_step',[paramWeakDom.feed_ampli.index,0.003], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramWeakDom.feed_ampli.index,2], ...
    'min_bound', [paramWeakDom.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

[branchStstWeakDom,~] = SetupStst( ...
    funcs, ...
    'contpar',[paramWeakDom.feed_ampli.index, paramWeakDom.omega1.index], ...
    'corpar',[paramWeakDom.omega1.index],...
    'x', timeSeriesWeakDom.y(:,end), ...
    'parameter',paramWeakDom.values(1:end-1),...
    opt_inputs{:},...
    stepBoundWeakDom{:});

% calculate
[branchStstWeakDom,~,~,~] = br_contn(funcs,branchStstWeakDom,60);
branchStstWeakDom = br_rvers(branchStstWeakDom);
[branchStstWeakDom,~,~,~] = br_contn(funcs,branchStstWeakDom,90);

% stability analysis
[branchStstWeakDom.nunst,~,~,branchStstWeakDom.point] = GetRotStability( ...
    branchStstWeakDom, ...
    funcs, 1);
branchStstWeakDom.indFold = find(abs(diff(branchStstWeakDom.nunst))==1);
branchStstWeakDom.indHopf = find(abs(diff(branchStstWeakDom.nunst))==2);


%% Weak dominating, Bifurcation Phase
% We make 4 "cuts" along the phase direction starting with the branch above
% where we followed amplitude. The cuts are at 2/6th, 3/6th, 4/6th, and
% 5/6th the point number of the amplitude branch.

% create container for phase stst branches
numPhaseBranches = 4;
pts4PhaseBranch = round( ...
    numel(branchStstWeakDom.point)/(numPhaseBranches+2) * ( [1:numPhaseBranches] + 1) );
branch_length = 180;

branchPhaseWeakDom = repmat( ...
    struct( ...
    'method', struct, ...
    'parameter', struct, ...
    'point', struct, ...
    'nunst', 0, ...
    'indFold', 0, ...
    'indHopf', 0),...
    [numPhaseBranches,1]);

stepBoundWeakDomPhase = { ...
    'step',pi/64, ...
    'max_step',[paramWeakDom.feed_phase.index,pi/32], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramWeakDom.feed_phase.index,8*pi], ...
    'min_bound', [paramWeakDom.feed_phase.index,-8*pi], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

for i = 1:numPhaseBranches
    [branchStstWeakDomPhase,~] = SetupStst( ...
        funcs, ...
        'contpar',[paramWeakDom.feed_phase.index, paramWeakDom.omega1.index], ...
        'corpar',[paramWeakDom.omega1.index],...
        'x', branchStstWeakDom.point(pts4PhaseBranch(i)).x, ...
        'parameter',branchStstWeakDom.point(pts4PhaseBranch(i)).parameter,...
        opt_inputs{:},...
        stepBoundWeakDomPhase{:});

    % calculate
    [branchStstWeakDomPhase,~,~,~] = br_contn(funcs,branchStstWeakDomPhase,branch_length);
    branchStstWeakDomPhase = br_rvers(branchStstWeakDomPhase);
    [branchStstWeakDomPhase,~,~,~] = br_contn(funcs,branchStstWeakDomPhase,branch_length);

    % stability analysis
    [branchStstWeakDomPhase.nunst,~,~,branchStstWeakDomPhase.point] = GetRotStability( ...
        branchStstWeakDomPhase, ...
        funcs, 1);
    branchStstWeakDomPhase.indFold = find(abs(diff(branchStstWeakDomPhase.nunst))==1);
    branchStstWeakDomPhase.indHopf = find(abs(diff(branchStstWeakDomPhase.nunst))==2);
    
    % add to 
    branchPhaseWeakDom(i,1) = branchStstWeakDomPhase;
    
end

%% Weak dominating, Fold Continuations 
% Continuing the fold bifurcations from the lower bifurcations. The
% familiar angle.
stepBoundFold = { ...
    'step',0.05, ...
    'max_step', ...
    [paramWeakDom.feed_ampli.index,0.1, ...
    paramWeakDom.feed_phase.index,pi/8], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramWeakDom.feed_ampli.index,2], ...
    'min_bound', [paramWeakDom.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

numFoldsWeakDom = 2;
ptsFoldsWeakDom = [2, 3];
foldsWeakDom = repmat( ...
    orderfields(...
    struct( ...
    'method', struct, ...
    'parameter', struct, ...
    'point', struct, ...
    'nunst', 0, ...
    'indFold', 0, ...
    'indHopf', 0)),...
    [numFoldsWeakDom,1]);

for i = 1:numFoldsWeakDom
    
    [foldfuncs,foldWeak,~]=SetupRWFold( ...
        funcs, ...
        branchPhaseWeakDom(3,1), ...
        branchPhaseWeakDom(3,1).indFold(ptsFoldsWeakDom(i)),...
        'contpar', ...
        [paramWeakDom.feed_phase.index, ...
        paramWeakDom.feed_ampli.index, ...
        paramWeakDom.omega1.index], ...
        'dir',paramWeakDom.feed_ampli.index, ...
        opt_inputs{:},...
        stepBoundFold{:}); 

    foldBranchLength = 150;

    foldWeak = br_contn(foldfuncs,foldWeak,foldBranchLength);
    foldWeak = br_rvers(foldWeak);
    foldWeak = br_contn(foldfuncs,foldWeak,foldBranchLength);
    
    foldsWeakDom(i,1) = orderfields(foldWeak);
end


%% Weak dominating, Hopf Continuations 
% Continuing the hopf bifurcations.
%
% IT FAILS TO CONTINUE HOPF BIFURCATIONS D:
%
%
stepBoundHopf = { ...
    'step',0.05, ...
    'max_step', ...
    [paramWeakDom.feed_ampli.index,0.1, ...
    paramWeakDom.feed_phase.index,pi/8], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramWeakDom.feed_ampli.index,2], ...
    'min_bound', [paramWeakDom.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

numHopfsWeakDom = 2;
ptsHopfsWeakDom = [2, 3];
hopfsWeakDom = repmat( ...
    orderfields(...
    struct( ...
    'method', struct, ...
    'parameter', struct, ...
    'point', struct, ...
    'nunst', 0, ...
    'indFold', 0, ...
    'indHopf', 0)),...
    [numHopfsWeakDom,1]);

for i = 1:numHopfsWeakDom
    [hopfOne,~]=SetupRWHopf( ...
        funcs, ...
        branchPhaseWeakDom(1,1), ...
        branchPhaseWeakDom(1,1).indHopf(ptsHopfsWeakDom(i)), ...
        'contpar', ...
        [paramWeakDom.feed_phase.index, ...
        paramWeakDom.feed_ampli.index, ...
        paramWeakDom.omega1.index], ...
        'dir',paramWeakDom.feed_phase.index, ...
        opt_inputs{:},...
        stepBoundHopf{:});

    hopfBranchLength = 150;
    
    [hopfOne,~,~,~] = br_contn(funcs,hopfOne,hopfBranchLength);
    hopfOne = br_rvers(hopfOne);
    hopfOne = br_contn(funcs,hopfOne,hopfBranchLength);
end
    

%% Save Weak Dom
save([datadir, ...
    'weakDom.mat'], ...
    'paramWeakDom','systemWeakDom','timeSeriesWeakDom', ...
    'stepBoundWeakDom','branchStstWeakDom', ...
    'stepBoundWeakDomPhase', 'branchPhaseWeakDom', ...
    'stepBoundFold', 'foldsWeakDom', ...
    'stepBoundHopf', 'hopfsWeakDom');

%% Strong dominating
% You can find this time series by sweeping up, but I am too lasy to write
% a sweep program for this system. Instead, I'm going to guess a history
% which might get me into the regime with the strong field dominating.

paramStrDom = setup_params_nonDim_CnstCplRatio(...
    'save',0, ...
    'J', current, ...
    'feed_ampli',fbAmp, ...
    'feed_ampliMatrix', feedAmpMat, ...
    'feed_phase',fbPhase, ...
    'feed_phaseMatrix', feedPhaseMat, ...
    'tau_fb', tau_fb_par, ...
    'alpha_par',alpha_par, ...
    'clear',0,...
    'populate_wrkspc', 0);

% Turn On solver
systemStrDom = @(x)nonDim_bimodalINTENSITYSystem_CnstCplRatio(...
    x(1,1,:) + 1i*x(2,1,:), x(1,2,:) + 1i*x(2,2,:),... % Es, EsTau
    x(3,1,:), x(3,2,:),... % Iw, IwTau
    x(4,1,:), ... % rho
    x(5,1,:), ... % n
    paramStrDom.cplPar.feed_phaseMatrix, ...
    paramStrDom.cplPar.feed_ampliMatrix, ...
    paramStrDom.values(1),paramStrDom.values(2), ...
    paramStrDom.values(3),paramStrDom.values(4), ...
    paramStrDom.values(5),paramStrDom.values(6), ...
    paramStrDom.values(7),paramStrDom.values(8), ...
    paramStrDom.values(9),paramStrDom.values(10), ...
    paramStrDom.values(11),paramStrDom.values(12), ...
    paramStrDom.values(13),paramStrDom.values(14), ...
    paramStrDom.values(15),paramStrDom.values(16), ...
    paramStrDom.values(17),paramStrDom.values(18), ...
    paramStrDom.values(19),paramStrDom.values(20), ...
    paramStrDom.values(21),paramStrDom.values(22), ...
    paramStrDom.values(23),paramStrDom.values(24), ...
    paramStrDom.values(25),paramStrDom.values(26), ...
    paramStrDom.values(27),paramStrDom.values(28), ...
    paramStrDom.values(29)); % Leave out omega

lags = paramStrDom.values(paramStrDom.tau_fb.index);
hist = [0.9^2, 0, 0.01, 0.6, 14];
timeSpan = [0, 15];

timeSeriesStrDom = dde23( ...
    @(t,y,z)systemStrDom([y,z]),...
    lags,hist,timeSpan,ddeset('RelTol',10^-8)); % , 'OutputFcn', @odeplot

%% Strong dominating, Bifurcation
% Now we will use the time series from above to explore the bifurcations in
% the strong dominating case.
branch_length = 120;

stepBoundStrDom = {'step',0.009, ...
    'max_step',[paramStrDom.feed_ampli.index,0.009], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramStrDom.feed_ampli.index,2], ...
    'min_bound', [paramStrDom.feed_ampli.index,-2], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

[branchStstStrDom,~]=SetupStst(funcs, ...
    'contpar',[paramStrDom.feed_ampli.index, paramStrDom.omega1.index], ...
    'corpar',[paramStrDom.omega1.index],...
    'x', timeSeriesStrDom.y(:,end), ...
    'parameter',paramStrDom.values(1:end-1),...
    opt_inputs{:},...
    stepBoundStrDom{:});

% calculate
[branchStstStrDom,~,~,~] = br_contn(funcs,branchStstStrDom,branch_length);
branchStstStrDom = br_rvers(branchStstStrDom);
[branchStstStrDom,~,~,~] = br_contn(funcs,branchStstStrDom,round(branch_length/4));

% stability analysis
[branchStstStrDom.nunst,~,~,branchStstStrDom.point] = GetRotStability(...
    branchStstStrDom, ...
    funcs, 1);
branchStstStrDom.indFold = find(abs(diff(branchStstStrDom.nunst))==1);
branchStstStrDom.indHopf = find(abs(diff(branchStstStrDom.nunst))==2);


%% Strong dominating, Bifurcation Phase
% We make 4 "cuts" along the phase direction starting with the branch above
% where we followed amplitude. The cuts are at 2/6th, 3/6th, 4/6th, and
% 5/6th the point number of the amplitude branch.

% create container for phase stst branches
numPhaseBranches = 4;
pts4PhaseBranch = round( ...
    numel(branchStstStrDom.point)/(numPhaseBranches+2) * ( [1:numPhaseBranches] + 1) );
branch_length = 180;

branchPhaseStrDom = repmat( ...
    struct( ...
    'method', struct, ...
    'parameter', struct, ...
    'point', struct, ...
    'nunst', 0, ...
    'indFold', 0, ...
    'indHopf', 0),...
    [numPhaseBranches,1]);

stepBoundStrDomPhase = { ...
    'step',pi/64, ...
    'max_step',[paramStrDom.feed_phase.index,1.5*pi/32], ...
    'newton_max_iterations',10, ...
    'max_bound',[paramStrDom.feed_phase.index,8*pi], ...
    'min_bound', [paramStrDom.feed_phase.index,-8*pi], ...
    'halting_accuracy',1e-10, ...
    'minimal_accuracy',1e-8};

for i = 1:numPhaseBranches
    [branchStstStrDomPhase,~] = SetupStst( ...
        funcs, ...
        'contpar',[paramStrDom.feed_phase.index, paramStrDom.omega1.index], ...
        'corpar',[paramStrDom.omega1.index],...
        'x', branchStstStrDom.point(pts4PhaseBranch(i)).x, ...
        'parameter',branchStstStrDom.point(pts4PhaseBranch(i)).parameter,...
        opt_inputs{:},...
        stepBoundStrDomPhase{:});

    % calculate
    [branchStstStrDomPhase,~,~,~] = br_contn(funcs,branchStstStrDomPhase,branch_length);
    branchStstStrDomPhase = br_rvers(branchStstStrDomPhase);
    [branchStstStrDomPhase,~,~,~] = br_contn(funcs,branchStstStrDomPhase,branch_length);

    % stability analysis
    [branchStstStrDomPhase.nunst,~,~,branchStstStrDomPhase.point] = GetRotStability( ...
        branchStstStrDomPhase, ...
        funcs, 1);
    branchStstStrDomPhase.indFold = find(abs(diff(branchStstStrDomPhase.nunst))==1);
    branchStstStrDomPhase.indHopf = find(abs(diff(branchStstStrDomPhase.nunst))==2);
    
    % add to 
    branchPhaseStrDom(i,1) = branchStstStrDomPhase;
    
end


%% Save Strong Dom
save([datadir, ...
    'strongDom.mat'], ...
    'paramStrDom','systemStrDom','timeSeriesStrDom', ...
    'stepBoundStrDom','branchStstStrDom', ...
    'stepBoundStrDomPhase', 'branchStstStrDomPhase');

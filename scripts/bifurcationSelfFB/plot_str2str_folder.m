%% PLOT str2strFB
% MAIN FOLDER - EVERYTHING

figure();

% for i = 1:numel(hopfPkgStrDom)
%     % select the ones that destablize the branch
%     [~,destabFold,destabHopf] = destabilize_finder(branchPhaseStrDom(i,1).nunst);
%     
%     if numel(destabHopf) ~= 0 && max(destabHopf) <= numel(hopfPkgStrDom{i})
%         disp('yep')
%         for j = destabHopf' % 1:numel(hopfPkgStrDom{i})
%             if hopfPkgStrDom{i}(j,1).error == 0
%                 plot_branch3(hopfPkgStrDom{i}(j,1), paramStrDom, ...
%                     'add_2_gcf',1, ...
%                     'color', 'cyan', ...
%                     'axes_indParam', ...
%                     {hopfPkgStrDom{i}(j,1).parameter.free(1), ...
%                     hopfPkgStrDom{i}(j,1).parameter.free(2), ...
%                     'x1'}, ...
%                     'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%             end
%         end
%     end
%     
%     if numel(destabFold) ~= 0 && max(destabFold) <= numel(foldPkgStrDom{i})
%         for j = destabFold' % 1:numel(foldPkgStrDom{i})
%             if foldPkgStrDom{i}(j,1).error == 0
%                 plot_branch3(foldPkgStrDom{i}(j,1), paramStrDom, ...
%                     'add_2_gcf',1, ...
%                     'color', 'r', ...
%                     'axes_indParam', ...
%                     {foldPkgStrDom{i}(j,1).parameter.free(1), ...
%                     foldPkgStrDom{i}(j,1).parameter.free(2), ...
%                     'x1'}, ...
%                     'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%             end
%         end
%     end
%     
% end

% find highest nunst
globalmax = 0;
for i = 1: numel(branchPhaseStrDom)
    localmax = max(branchPhaseStrDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end
% for j = 1:numel(ampPkgStrDom)
%     branchAmpStrDom = ampPkgStrDom{j,1};
%     for i = 1: numel(branchAmpStrDom)
%         localmax = max(branchAmpStrDom(i,1).nunst);
%         if localmax > globalmax
%             globalmax = localmax;
%         end
%     end
% end
for i = 1: numel(branchStstStrDom)
    localmax = max(branchStstStrDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end

% ribs
for i = numel(branchPhaseStrDom):-1:1
    plot_branch3(branchPhaseStrDom(i,1), paramStrDom, ...
        'nunst_color',{branchPhaseStrDom(i,1).nunst, globalmax}, ...
        'add_2_gcf',1, ...
        'axes_indParam', ...
        {paramStrDom.feed_phase.index, ...
        paramStrDom.feed_ampli.index, ...
        'x1'}, ...
        'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
end

% % main spine
% cutBranch = branchStstStrDom;
% cutBranch.point(1:50) = [];
% cutBranch.nunst(1:50) = [];
% 
% plot_branch3(cutBranch, paramStrDom, ...
%     'nunst_color',{cutBranch.nunst, 6}, ... % globalmax}, ...
%     'add_2_gcf',1, ...
%     'axes_indParam', ...
%     {paramStrDom.feed_phase.index, ...
%     paramStrDom.feed_ampli.index, ...
%     'x1'}, ...
%     'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );

% % extra spines
% for j = 1:numel(ampPkgStrDom)
%     
%     branchAmpStrDom = ampPkgStrDom{j,1};
%     
%     % extra spines
%     for i = 1:numel(branchAmpStrDom)
%         
%         if branchAmpStrDom(i,1).error == 1;
%             continue
%         end
%         
%         plot_branch3(branchAmpStrDom(i,1), paramWeakDom, ...
%             'nunst_color',{branchAmpStrDom(i,1).nunst, 6}, ... % globalmax}, ...
%             'add_2_gcf',1, ...
%             'axes_indParam', ...
%             {paramWeakDom.feed_phase.index, ...
%             paramWeakDom.feed_ampli.index, ...
%             'x1'}, ...
%             'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
%     end
% end
% 
% ylim([0,1])
% zlim([0,3])


%% PLOT str2strFB
% MAIN FOLDER - Precise in topologically different region.

figure();

% find highest nunst
globalmax = 0;
for i = 1: numel(precisePhaseBranchesStrDom)
    localmax = max(precisePhaseBranchesStrDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end

% ribs
for i = 1:numel(precisePhaseBranchesStrDom)
    plot_branch3(precisePhaseBranchesStrDom(i,1), paramStrDom, ...
        'nunst_color',{precisePhaseBranchesStrDom(i,1).nunst, globalmax}, ...
        'add_2_gcf',1, ...
        'axes_indParam', ...
        {paramStrDom.feed_phase.index, ...
        paramStrDom.feed_ampli.index, ...
        'x1'}, ...
        'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
end

% % spines
% for i = 1:numel(botSpinesStrDom)
%     plot_branch3(botSpinesStrDom(i,1), paramStrDom, ...
%         'nunst_color',{botSpinesStrDom(i,1).nunst, globalmax}, ...
%         'add_2_gcf',1, ...
%         'axes_indParam', ...
%         {paramStrDom.feed_phase.index, ...
%         paramStrDom.feed_ampli.index, ...
%         'x1'}, ...
%         'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
% end

% ylim([0.32,0.36])

% % All hopfs and folds
% for i = 1:numel(hopfPkgStrDom)
%     for j = 1:numel(hopfPkgStrDom{i})
%         if hopfPkgStrDom{i}(j,1).error == 0
%             plot_branch3(hopfPkgStrDom{i}(j,1), paramStrDom, ...
%                 'add_2_gcf',1, ...
%                 'color', 'cyan', ...
%                 'axes_indParam', ...
%                 {hopfPkgStrDom{i}(j,1).parameter.free(1), ...
%                 hopfPkgStrDom{i}(j,1).parameter.free(2), ...
%                 'x1'}, ...
%                 'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%         end
%     end
%     
%     for j = 1:numel(foldPkgStrDom{i})
%         if foldPkgStrDom{i}(j,1).error == 0
%             plot_branch3(foldPkgStrDom{i}(j,1), paramStrDom, ...
%                 'add_2_gcf',1, ...
%                 'color', 'r', ...
%                 'axes_indParam', ...
%                 {foldPkgStrDom{i}(j,1).parameter.free(1), ...
%                 foldPkgStrDom{i}(j,1).parameter.free(2), ...
%                 'x1'}, ...
%                 'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%         end
%     end
%     
% end


%% structure_overview
%pt 1 strong dom

figure();

% only the destabilzing bifurcations
for i = 1:numel(hopfPkgStrDom)
    % select the ones that destablize the branch
    [~,destabFold,destabHopf] = destabilize_finder(branchPhaseStrDom(i,1).nunst);
    
    if numel(destabHopf) ~= 0 && max(destabHopf) <= numel(hopfPkgStrDom{i})
        disp('yep')
        for j = destabHopf' % 1:numel(hopfPkgStrDom{i})
            if hopfPkgStrDom{i}(j,1).error == 0
                plot_branch3(hopfPkgStrDom{i}(j,1), paramStrDom, ...
                    'add_2_gcf',1, ...
                    'color', 'cyan', ...
                    'axes_indParam', ...
                    {hopfPkgStrDom{i}(j,1).parameter.free(1), ...
                    hopfPkgStrDom{i}(j,1).parameter.free(2), ...
                    'x1'}, ...
                    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
            end
        end
    end
    
    if numel(destabFold) ~= 0 && max(destabFold) <= numel(foldPkgStrDom{i})
        for j = destabFold' % 1:numel(foldPkgStrDom{i})
            if foldPkgStrDom{i}(j,1).error == 0
                plot_branch3(foldPkgStrDom{i}(j,1), paramStrDom, ...
                    'add_2_gcf',1, ...
                    'color', 'r', ...
                    'axes_indParam', ...
                    {foldPkgStrDom{i}(j,1).parameter.free(1), ...
                    foldPkgStrDom{i}(j,1).parameter.free(2), ...
                    'x1'}, ...
                    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
            end
        end
    end
    
end

% % All hopfs and folds
% for i = 1:numel(hopfPkgStrDom)
%     for j = 1:numel(hopfPkgStrDom{i})
%         if hopfPkgStrDom{i}(j,1).error == 0
%             plot_branch3(hopfPkgStrDom{i}(j,1), paramStrDom, ...
%                 'add_2_gcf',1, ...
%                 'color', 'cyan', ...
%                 'axes_indParam', ...
%                 {hopfPkgStrDom{i}(j,1).parameter.free(1), ...
%                 hopfPkgStrDom{i}(j,1).parameter.free(2), ...
%                 'x1'}, ...
%                 'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%         end
%     end
%     
%     for j = 1:numel(foldPkgStrDom{i})
%         if foldPkgStrDom{i}(j,1).error == 0
%             plot_branch3(foldPkgStrDom{i}(j,1), paramStrDom, ...
%                 'add_2_gcf',1, ...
%                 'color', 'r', ...
%                 'axes_indParam', ...
%                 {foldPkgStrDom{i}(j,1).parameter.free(1), ...
%                 foldPkgStrDom{i}(j,1).parameter.free(2), ...
%                 'x1'}, ...
%                 'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
%         end
%     end
%     
% end

% find highest nunst
globalmax = 0;
for i = 1: numel(branchPhaseStrDom)
    localmax = max(branchPhaseStrDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end
for j = 1:numel(ampPkgStrDom)
    branchAmpStrDom = ampPkgStrDom{j,1};
    for i = 1: numel(branchAmpStrDom)
        localmax = max(branchAmpStrDom(i,1).nunst);
        if localmax > globalmax
            globalmax = localmax;
        end
    end
end
for i = 1: numel(branchStstStrDom)
    localmax = max(branchStstStrDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end

% ribs
for i = numel(branchPhaseStrDom):-1:1
    plot_branch3(branchPhaseStrDom(i,1), paramStrDom, ...
        'nunst_color',{branchPhaseStrDom(i,1).nunst, 6}, ... % globalmax}, ...
        'add_2_gcf',1, ...
        'axes_indParam', ...
        {paramStrDom.feed_phase.index, ...
        paramStrDom.feed_ampli.index, ...
        'x1'}, ...
        'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
end

% main spine
cutBranch = branchStstStrDom;
cutBranch.point(1:50) = [];
cutBranch.nunst(1:50) = [];

plot_branch3(cutBranch, paramStrDom, ...
    'nunst_color',{cutBranch.nunst, 6}, ... % globalmax}, ...
    'add_2_gcf',1, ...
    'axes_indParam', ...
    {paramStrDom.feed_phase.index, ...
    paramStrDom.feed_ampli.index, ...
    'x1'}, ...
    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );

% extra spines
for j = 1:numel(ampPkgStrDom)
    
    branchAmpStrDom = ampPkgStrDom{j,1};
    
    % extra spines
    for i = 1:numel(branchAmpStrDom)
        
        if branchAmpStrDom(i,1).error == 1;
            continue
        end
        
        plot_branch3(branchAmpStrDom(i,1), paramWeakDom, ...
            'nunst_color',{branchAmpStrDom(i,1).nunst, 6}, ... % globalmax}, ...
            'add_2_gcf',1, ...
            'axes_indParam', ...
            {paramWeakDom.feed_phase.index, ...
            paramWeakDom.feed_ampli.index, ...
            'x1'}, ...
            'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
    end
end

ylim([0,1])
zlim([0,3])

%% structure_overview
%pt 2 weak dom

figure();

% hopfs and folds
for i = 1:numel(hopfPkgWeakDom)
    for j = 1:numel(hopfPkgWeakDom{i})
        if hopfPkgWeakDom{i}(j,1).error == 0
            plot_branch3(hopfPkgWeakDom{i}(j,1), paramWeakDom, ...
                'add_2_gcf',1, ...
                'color', 'cyan', ...
                'axes_indParam', ...
                {hopfPkgWeakDom{i}(j,1).parameter.free(1), ...
                hopfPkgWeakDom{i}(j,1).parameter.free(2), ...
                'x1'}, ...
                'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
        end
    end
    
    for j = 1:numel(foldPkgWeakDom{i})
        if foldPkgWeakDom{i}(j,1).error == 0
            plot_branch3(foldPkgWeakDom{i}(j,1), paramWeakDom, ...
                'add_2_gcf',1, ...
                'color', 'r', ...
                'axes_indParam', ...
                {foldPkgWeakDom{i}(j,1).parameter.free(1), ...
                foldPkgWeakDom{i}(j,1).parameter.free(2), ...
                'x1'}, ...
                'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );
        end
    end
    
end

% find highest nunst
localmax = 0;
globalmax = 0;
for i = 1: numel(branchPhaseWeakDom)
    localmax = max(branchPhaseWeakDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end
for j = 1:numel(ampPkgWeakDom)
    
    branchAmpWeakDom = ampPkgWeakDom{j,1};
    
    for i = 1: numel(branchAmpWeakDom)
        localmax = max(branchAmpWeakDom(i,1).nunst);
        if localmax > globalmax
            globalmax = localmax;
        end
    end
end
for i = 1: numel(branchStstWeakDom)
    localmax = max(branchStstWeakDom(i,1).nunst);
    if localmax > globalmax
        globalmax = localmax;
    end
end

% main spine
cutBranch = branchStstWeakDom;
cutBranch.point(1:50) = [];
cutBranch.nunst(1:50) = [];

plot_branch3(cutBranch, paramWeakDom, ...
    'nunst_color',{cutBranch.nunst, 6}, ... % globalmax}, ...
    'add_2_gcf',1, ...
    'axes_indParam', ...
    {paramWeakDom.feed_phase.index, ...
    paramWeakDom.feed_ampli.index, ...
    'x1'}, ...
    'PlotStyle', { 'LineStyle', '-', 'Marker', '.' } );

% extra spines
for j = 1:numel(ampPkgWeakDom)
    
    branchAmpWeakDom = ampPkgWeakDom{j,1};
    
    for i = 1:numel(branchAmpWeakDom)
        plot_branch3(branchAmpWeakDom(i,1), paramWeakDom, ...
            'nunst_color',{branchAmpWeakDom(i,1).nunst, 6}, ... % globalmax}, ...
            'add_2_gcf',1, ...
            'axes_indParam', ...
            {paramWeakDom.feed_phase.index, ...
            paramWeakDom.feed_ampli.index, ...
            'x1'}, ...
            'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
    end
end

for i = 1:numel(branchAmpWeakDom)
    plot_branch3(branchAmpWeakDom(i,1), paramWeakDom, ...
        'nunst_color',{branchAmpWeakDom(i,1).nunst, 6}, ... % globalmax}, ...
        'add_2_gcf',1, ...
        'axes_indParam', ...
        {paramWeakDom.feed_phase.index, ...
        paramWeakDom.feed_ampli.index, ...
        'x1'}, ...
        'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
end

% ribs
for i = numel(branchPhaseWeakDom):-1:1
    plot_branch3(branchPhaseWeakDom(i,1), paramWeakDom, ...
        'nunst_color',{branchPhaseWeakDom(i,1).nunst, 6}, ... % globalmax}, ...
        'add_2_gcf',1, ...
        'axes_indParam', ...
        {paramWeakDom.feed_phase.index, ...
        paramWeakDom.feed_ampli.index, ...
        'x1'}, ...
        'PlotStyle', { 'LineStyle', 'None', 'Marker', '.' } );
end

% ylim([0,0.6])
zlim([0,0.6])





%% Setup General
clear;

% Load and find the relevant phases
load(strcat(data_directory(), 'specific_bifurcations/rephases.mat'))

% make compatible
phases = rephases;

% steps
st_amp = steps_amp(param, ...
    'step', 0.002, ...
    'max_step', [param.feed_ampli.index,0.002, param.omega1.index,0.1], ...
    'max_bound', [param.feed_ampli.index, 0.5]);
st_phase = steps_phase(param, ...
    'max_step', [param.feed_phase.index,pi/16, param.omega1.index,0.1]);

%% Feedback Amplitude Cont, phase 0, find nearby points
famp_cur560_phase0 = cell(1,6);

for i = 1:numel(famp_cur560_phase0)
    argval = 0;
    ind = branch_pts_near_param_at_unique_intensity(phases{i}, ...
                                                    param.feed_phase.index, ...
                                                    argval, ...
                                                    0.05, ...
                                                    3e-3);
    
    for j = 1:numel(ind)
        ptx = phases{i}.point(ind(j)).x;
        ptpar = phases{i}.point(ind(j)).parameter;
        ptpar(param.feed_phase.index) = argval;

        [famp_cur560_phase0{j, i},~] = SetupStst( ...
            funcs, ...
            'contpar',[param.feed_ampli.index, param.omega1.index], ...
            'corpar',[param.omega1.index],...
            'x', ptx, ...
            'parameter', ptpar,...
            opt_inputs{:},...
            st_amp{:});
    end
end

shape = size(famp_cur560_phase0);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phase0{i,j})
            famp_cur560_phase0{i, j} = bcont( funcs, ...
                                              famp_cur560_phase0{i, j}, ...
                                              200, ...
                                              200 );
            famp_cur560_phase0{i, j} = branch_stability(funcs, ...
                                                        famp_cur560_phase0{i, j});
        end
    end
end



%% Feedback Amplitude Cont, phase pi/2
famp_cur560_phasePi2 = cell(1,6);

for i = 1:numel(famp_cur560_phasePi2)
    argval = pi/2;
    ind = branch_pts_near_param_at_unique_intensity(phases{i}, ...
                                                    param.feed_phase.index, ...
                                                    argval, ...
                                                    0.04, ...
                                                    9e-3);
    
    for j = 1:numel(ind)
        ptx = phases{i}.point(ind(j)).x;
        ptpar = phases{i}.point(ind(j)).parameter;
        ptpar(param.feed_phase.index) = argval;

        [famp_cur560_phasePi2{j, i},~] = SetupStst( ...
            funcs, ...
            'contpar',[param.feed_ampli.index, param.omega1.index], ...
            'corpar',[param.omega1.index],...
            'x', ptx, ...
            'parameter', ptpar,...
            opt_inputs{:},...
            st_amp{:});
    end
end

check_intensity(famp_cur560_phasePi2)

famp_cur560_phasePi2(end,:) = [];

shape = size(famp_cur560_phasePi2);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phasePi2{i,j})
            famp_cur560_phasePi2{i, j} = bcont( funcs, ...
                                              famp_cur560_phasePi2{i, j}, ...
                                              200, ...
                                              200 );
            famp_cur560_phasePi2{i, j} = branch_stability(funcs, ...
                                                        famp_cur560_phasePi2{i, j});
        end
    end
end


%% Feedback Amplitude Cont, phase pi
famp_cur560_phasePi4 = cell(1,6);

for i = 1:numel(famp_cur560_phasePi4)
    argval = pi/4;
    ind = branch_pts_near_param_at_unique_intensity(phases{i}, ...
                                                    param.feed_phase.index, ...
                                                    argval, ...
                                                    0.04, ...
                                                    9e-3);
    
    for j = 1:numel(ind)
        ptx = phases{i}.point(ind(j)).x;
        ptpar = phases{i}.point(ind(j)).parameter;
        ptpar(param.feed_phase.index) = argval;

        [famp_cur560_phasePi4{j, i},~] = SetupStst( ...
            funcs, ...
            'contpar',[param.feed_ampli.index, param.omega1.index], ...
            'corpar',[param.omega1.index],...
            'x', ptx, ...
            'parameter', ptpar,...
            opt_inputs{:},...
            st_amp{:});
    end
end

check_intensity(famp_cur560_phasePi4)

shape = size(famp_cur560_phasePi4);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phasePi4{i,j})
            famp_cur560_phasePi4{i, j} = bcont( funcs, ...
                                              famp_cur560_phasePi4{i, j}, ...
                                              200, ...
                                              200 );
            famp_cur560_phasePi4{i, j} = branch_stability(funcs, ...
                                                        famp_cur560_phasePi4{i, j});
        end
    end
end

%% save
if 1
    save(strcat(data_directory(), 'specific_bifurcations/ecms'), ...
    'funcs', ...
    'famp_cur560_phase0', ...
    'famp_cur560_phasePi2', ...
    'famp_cur560_phasePi4', ...
    'param', ...
    'st_amp', ...
    'st_bif_cur_amp', ...
    'st_cur', ...
    'st_phase', ...
    'opt_inputs')
end


%% plot phase 0
figure;
shape = size(famp_cur560_phase0);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phase0{i,j})
            plot_branch3( famp_cur560_phase0{i,j}, ...
                param, ...
                'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
                'nunst_color', famp_cur560_phase0{i,j}.nunst, ...
                'add_2_gcf', 1)
        end
    end
end

%% plot phase pi/2
figure;
shape = size(famp_cur560_phasePi2);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phasePi2{i,j})
            plot_branch3( famp_cur560_phasePi2{i,j}, ...
                param, ...
                'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
                'nunst_color', famp_cur560_phasePi2{i,j}.nunst, ...
                'add_2_gcf', 1)
        end
    end
end


%% plot phase pi/4
figure;
shape = size(famp_cur560_phasePi4);
for i = 1:shape(1)
    for j = 1:shape(2)
        if ~isempty(famp_cur560_phasePi4{i,j})
            plot_branch3( famp_cur560_phasePi4{i,j}, ...
                param, ...
                'axes_indParam', {param.feed_phase.index, param.feed_ampli.index, 'x1'}, ...
                'nunst_color', famp_cur560_phasePi4{i,j}.nunst, ...
                'add_2_gcf', 1)
        end
    end
end
